// Mocks generated by Mockito 5.4.6 from annotations
// in fa_de_filme/test/repository/movies_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:fa_de_filme/models/movie.dart' as _i3;
import 'package:fa_de_filme/models/movies_list_response.dart' as _i2;
import 'package:fa_de_filme/repository/datasources/dao.dart' as _i4;
import 'package:fa_de_filme/repository/datasources/movies_api.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMoviesListResponse_0 extends _i1.SmartFake
    implements _i2.MoviesListResponse {
  _FakeMoviesListResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMovie_1 extends _i1.SmartFake implements _i3.Movie {
  _FakeMovie_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DAO].
///
/// See the documentation for Mockito's code generation for more information.
class MockDAO extends _i1.Mock implements _i4.DAO {
  @override
  _i5.Future<void> saveAsFavorite(_i3.Movie? movie) => (super.noSuchMethod(
        Invocation.method(
          #saveAsFavorite,
          [movie],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> deleteFavorite(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteFavorite,
          [id],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<List<_i3.Movie>> listFavoriteMovies() => (super.noSuchMethod(
        Invocation.method(
          #listFavoriteMovies,
          [],
        ),
        returnValue: _i5.Future<List<_i3.Movie>>.value(<_i3.Movie>[]),
        returnValueForMissingStub:
            _i5.Future<List<_i3.Movie>>.value(<_i3.Movie>[]),
      ) as _i5.Future<List<_i3.Movie>>);

  @override
  _i5.Future<bool> isFavorite(int? id) => (super.noSuchMethod(
        Invocation.method(
          #isFavorite,
          [id],
        ),
        returnValue: _i5.Future<bool>.value(false),
        returnValueForMissingStub: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
}

/// A class which mocks [MoviesApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockMoviesApi extends _i1.Mock implements _i6.MoviesApi {
  @override
  _i5.Future<_i2.MoviesListResponse> getNowPlaying(int? pageKey) =>
      (super.noSuchMethod(
        Invocation.method(
          #getNowPlaying,
          [pageKey],
        ),
        returnValue:
            _i5.Future<_i2.MoviesListResponse>.value(_FakeMoviesListResponse_0(
          this,
          Invocation.method(
            #getNowPlaying,
            [pageKey],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.MoviesListResponse>.value(_FakeMoviesListResponse_0(
          this,
          Invocation.method(
            #getNowPlaying,
            [pageKey],
          ),
        )),
      ) as _i5.Future<_i2.MoviesListResponse>);

  @override
  _i5.Future<_i3.Movie> getMovieDetails(int? movieId) => (super.noSuchMethod(
        Invocation.method(
          #getMovieDetails,
          [movieId],
        ),
        returnValue: _i5.Future<_i3.Movie>.value(_FakeMovie_1(
          this,
          Invocation.method(
            #getMovieDetails,
            [movieId],
          ),
        )),
        returnValueForMissingStub: _i5.Future<_i3.Movie>.value(_FakeMovie_1(
          this,
          Invocation.method(
            #getMovieDetails,
            [movieId],
          ),
        )),
      ) as _i5.Future<_i3.Movie>);
}
